openapi: 3.0.0
info:
  title: Artysquad Backend API
  version: 1.0.0
  description: Automatically generated Swagger documentation for all MongoDB collections
servers:
- url: https://ii6284.buildship.run
  description: Buildship Backend Server
components:
  securitySchemes:
    BearerAuthAdmin:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Firebase Authentication (JWT). 
        Include your Firebase ID token in the `Authorization` header as: 
        `Bearer <Firebase ID Token>`. 
        Only users with `role: admin` are allowed.
    BearerAuthPartner:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Firebase Authentication (JWT). 
        Include your Firebase ID token in the `Authorization` header as: 
        `Bearer <Firebase ID Token>`. 
        Only users with `role: partner` or `role: admin` are allowed.  
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        uid:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        role:
          type: string
          enum: ["admin", "partner", "company", "user"]
      example:
        _id: 67d2bc99f0a0730d916a3fca
        email: test@artysquad.com
        uid: E0oVVP9aXqNpMwBeKThAkZXuuI33
        name: test
        createdAt: '2025-03-10T00:00:00Z'
        role: admin

    Activity:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        city:
          type: string
        postal_code:
          type: string
        price_per_person:
          type: string
        sessions_calendar:
          type: object
          properties:
            yyyy-mm-dd:
              type: array
              items:
                type: object
                properties:
                  dateStr:
                    type: string
                    format: date
                  dateJS:
                    type: string
                    format: date-time
                  start:
                    type: string
                    format: HH:MM
                  end:
                    type: string
                    format: HH:MM
                  session_datetime:
                    type: string
                    format: date-time
                  bookingIds:
                    type: array
                    items:
                      type: string
                    nullable: true
                  recurring:
                    type: boolean
                  recurring_first_date:
                    type: string
                    format: date
                    nullable: true
                  recurring_period:
                    type: string
                    enum: [week, month, day]
                    nullable: true
                  recurring_quantity:
                    type: integer
                    minimum: 2
                    maximum: 15
                    nullable: true
      example:
        _id: 67b474b2847affd92f166c62
        name: '[Happy Paint] Apéro peinture et plaisir dans le 9ème'
        city: Paris
        postal_code: '75009'
        price_per_person: '39'
        sessions_calendar:
          '2025-02-01':
            - dateStr: '2025-02-01'
              start: '17:00'
              end: '20:00'
              session_datetime: '2025-02-01T17:00:00.000Z'
              bookingIds: []
              recurring: false
          '2025-02-15':
            - dateStr: '2025-02-15'
              start: '17:00'
              end: '20:00'
              session_datetime: '2025-02-15T17:00:00.000Z'
              recurring: false
              bookingIds: ["67d2bfef8538cd94cfef73da"]
          '2025-03-15':
            - dateStr: '2025-03-15'
              start: '17:00'
              end: '20:00'
              session_datetime: '2025-03-15T17:00:00.000Z'
              recurring: false
              bookingIds: []

    Booking:
      type: object
      properties:
        _id:
          type: string
        activity_id:
          type: string
        name_experience:
          type: string
        partner_id:
          type: string
        name_partner:
          type: string
          nullable: true
        partner_email:
          type: string
          format: email
        duration_in_minutes:
          type: string
        activity_address:
          type: string
        activity_date:
          type: string
          format: date
        activity_date_formated:
          type: string
          description: Formatted as dd/mm/yyyy
          pattern: '^\d{2}/\d{2}/\d{4}$'
        creation_date:
          type: string
          format: date-time
        creation_date_formated:
          type: string
          description: Formatted as dd/mm/yyyy
          pattern: '^\d{2}/\d{2}/\d{4}$'
        activity_start:
          type: string
          format: HH:MM
          pattern: '^\d{2}:\d{2}$'
        activity_end:
          type: string
          format: HH:MM
          pattern: '^\d{2}:\d{2}$'
        price_per_person:
          type: integer
        quantity:
          type: integer
        total_price:
          type: integer
        customer_email:
          type: string
          format: email
        customer_name:
          type: string
        customer_phone:
          type: string
        customer_address:
          type: string
        code_used:
          type: string
        amount_discount:
          type: string
        stripe_checkout_id:
          type: string
        access_code:
          type: string
        invoice_id:
          type: string
        status:
          type: string
          enum: [to_validate, confirmed, done, cancelled, to_reschedule]
      example:
        _id: "67d2bfef8538cd94cfef73da"
        activity_id: "67b474b0847affd92f166c60"
        name_experience: "Voyage hypnotique au musée de l’art cinétique"
        partner_id: "67ab424802a0c72b69aaf398"
        name_partner: "Partner name"
        partner_email: "contact@partner.com"
        duration_in_minutes: "75"
        activity_address: "1 RUE DU TEST, 93300 AUBERVILLIERS"
        activity_date: "2025-05-10"
        activity_date_formated: "10/05/2025"
        creation_date: "2025-04-12"
        creation_date_formated: "12/04/2025"
        activity_start: "15:30"
        activity_end: "16:45"
        price_per_person: 14
        quantity: 1
        total_price: 14
        customer_email: "alice.doe@gmail.com"
        customer_name: "Alice Doe"
        customer_phone: "+33601020304"
        customer_address: "5 rue curial"
        code_used: ""
        amount_discount: 0
        stripe_checkout_id: "evt_1R29qARvqugAG1P7hgvED8ef"
        access_code: "818a7619-d699-46eb-8897-789da112244d"
        invoice_id: "67d2bfed8d3923d4e02e8f51"
        status: "to_validate"

    CompanyOrder:
      type: object
      properties:
        _id:
          type: string
        company_name:
          type: string
        status:
          type: string
      example:
        _id: 67c045fa2260a92ebde8b959
        company_name: Dupond
        status: valid

    Company:
      type: object
      properties:
        _id:
          type: string
        company_name:
          type: string
        email_contact:
          type: string
      example:
        _id: 67c045d32260a92ebde8b958
        company_name: Dupond
        email_contact: lukas@artysquad.com

    Invoice:
      type: object
      properties:
        _id:
          type: string
        invoice_id:
          type: string
        due_date:
          type: string
        creation_date:
          type: string
          format: date-time
        activity_start:
          type: string
          format: HH:MM
        activity_end:
          type: string
          format: HH:MM
        customer_name:
          type: string
        customer_country:
          type: string
          maxLength: 2
        customer_phone:
          type: string
        customer_email:
          type: string
          format: email
        experience_name:
          type: string
        description:
          type: string
        quantity:
          type: number
        unit_price:
          type: number
        subtotal:
          type: number
        discount:
          type: number
        total:
          type: number
        vat:
          type: number
        partner_name:
          type: string
        partner_mail:
          type: string
          format: email
        partner_phone:
          type: string
        link:
          type: string
      example:
        _id: "67d303779eb4659fb7df77c8"
        invoice_id: "F25AS-PARTENAIRE-030001"
        due_date: "2025-03-13"
        creation_date: "2025-03-13T20:00:00.000Z"
        activity_start: "12:00"
        activity_end: "14:00"
        customer_name: "Jean Dupont"
        customer_country: "FR"
        customer_phone: "+33600000000"
        customer_email: "jean.dupont@example.com"
        experience_name: "Atelier créatif en cuir personnalisé"
        description: "Tout le matériel est fourni sur place.\nUn atelier est disponible dans vos locaux et privatisé."
        quantity: 1
        unit_price: 139.11
        subtotal: 139.11
        discount: 0
        total: 139.11
        vat: 23.17
        partner_name: "Nom du Partenaire"
        partner_mail: "contact@partenaire.com"
        partner_phone: "09 00 00 00 00"
        link: https://storage.googleapis.com/arty_squad_all_files/artysquad-assets/dev/openapi_v1.yaml

    InvoiceRecap:
      type: object
      properties:
        _id:
          type: string
        month:
          type: string
        partner_id:
          type: string
        subtotal:
          type: number
        total:
          type: number
        vat:
          type: number
        link:
          type: string
      example:
        _id: 67d94cf27333fca42baf1e4e
        month: "2025-02"
        partner_id: 67ab424f02a0c72b69aaf3a7
        subtotal: 178
        total: 178
        vat: 29.67
        link: https://storage.googleapis.com/arty_squad_all_files/artysquad-assets/dev/openapi_v1.yaml

    Partner:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        city:
          type: string
        slug:
          type: string
        bio:
          type: string
        address:
          type: string
        website:
          type: string
        airtable_id:
          type: string
        siret:
          type: string
        naf:
          type: string
        vat:
          type: number
          enum: [0, 2.1, 5.5, 10, 20]
      example:
        _id: 67ab424f02a0c72b69aaf3a7
        name: Fluffy's
        email: fluffys.in.paris@gmail.com
        city: Paris, France
        slug: fluffys
        bio: Diplômée d’un CAP Pâtisserie à l’école Ferrandi et d’un master 2 Entreprenariat en école de commerce, Hortense commence sa carrière au prestigieux...
        address: '44 rue de Cléry'
        website: https://www.fluffysparis.com/
        airtable_id: rec1a2b3c4d5e6f7g8h9i0j
        siret: 12345678901234
        naf: 1234Z
        vat: 20
    PartnerCode:
      type: object
      properties:
        _id:
          type: string
        code:
          type: string
        activity_ids:
          type: array
          items:
            type: string
        creation_date:
          type: string
          format: date-time
        expiration_date:
          type: string
          format: date-time
        google_sheet_id:
          type: string
        sheet:
          type: string
        partner_id:
          type: string
        status:
          type: string
          enum: [valid, used, cancelled, expired]
      example:
        _id: "67d302db9eb4659fb7df77b8"
        code: "example_12345"
        activity_ids:
          - "67c9c5e64313aab5e0fa904a"
        creation_date: "2025-03-12T23:00:00.000Z"
        expiration_date: "2026-03-12T23:00:00.000Z"
        google_sheet_id: "1A2B3C4D5EFG6789EXAMPLEGOOGLESHEETID"
        sheet: "CODE2"
        partner_id: "67adb4bce6fdd25521ff5df7"
        status: "used"


    VoucherCode:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        creation_date:
          type: string
          format: date-time
        expiration_date:
          type: string
          format: date-time
        code_status:
          type: string
          enum: [available, in_use, to_check, cancelled]
        code:
          type: string
        company_order_id:
          type: string
        company:
          type: string
        company_id:
          type: string
        balance:
          type: number
          minimum: 0
        checkout_session_id:
          type: string
      example:
        _id: "67dd830bc975bcea5e226e1e"
        email: "user@example.com"
        first_name: "Marie"
        last_name: "DURAND"
        creation_date: "2025-03-21T15:17:31.490Z"
        expiration_date: "2026-03-21T15:17:31.490Z"
        code_status: "to_check"
        code: "ACME_001_12345678"
        company_order_id: "67c045fa2260a92ebde8b959"
        company: "ACME Corp"
        company_id: "67c045d32260a92ebde8b958"
        balance: 50
        checkout_session_id: "cs_test_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

    Session:
      type: object
      properties:
        _id:
          type: string
        dateStr:
          type: string
          format: date
        dateJS:
          type: string
          format: date-time
        start:
          type: string
          format: HH:MM
        end:
          type: string
          format: HH:MM
        session_datetime:
          type: string
          format: date-time
        bookingIds:
          type: array
          items:
            type: string
        recurring:
          type: boolean
        recurring_first_date:
          type: string
          format: date
        recurring_period:
          type: string
          enum: [week, month, day]
        recurring_quantity:
          type: integer
          minimum: 2
          maximum: 15
      example:
        _id: "67d2bfef8538cd94cfef73da"
        dateStr: "2025-03-15"
        dateJS: "2025-03-15T00:00:00.000Z"
        start: "17:00"
        end: "20:00"
        session_datetime: "2025-03-15T17:00:00.000Z"
        bookingIds:
          - "67d2bfef8538cd94cfef73du"
          - "67d2bfef8538cd94cfef73dv"
        recurring: false
        recurring_first_date: null
        recurring_period: null
        recurring_quantity: null

  parameters:
    TestModeHeader:
      name: testmode
      in: header
      required: false
      description: Set to `true` to enable test mode.
      schema:
        type: boolean
        default: false
    FirebaseUIDQueryParam:
      name: firebase_uid
      in: path
      required: true
      description: 'Firebase UID of the user'
      schema:
        type: string
    MongoIDQueryParam:
      name: id
      in: path
      required: true
      description: 'Object ID in MongoDB'
      schema:
        type: string

security: &secAdmin
- BearerAuthAdmin: []

paths:
  /auth:
    post:
      summary: 'Authenticate user (role: no authentication)'
      tags:
      - 'Auth'
      security: []
      description: |
        Authenticate user and return a JWT token, a refresh token and the user information. 
        This endpoint is used to log in users. 
        The token should be included in the `Authorization` header for all subsequent requests.
      parameters:
      - $ref: '#/components/parameters/TestModeHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                  format: password
              example:
                email: "test@artysquad.com"
                password: "passwordAB123@"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  refresh_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
  /me:
    get:
      summary: 'Get user profile (role: any)'
      tags:
      - 'Auth'
      security:
      - BearerAuthAdmin: []
      - BearerAuthPartner: []
      description: |
        Get user profile information. 
        This endpoint is used to retrieve the authenticated user's information.
      parameters:
      - $ref: '#/components/parameters/TestModeHeader'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                  message:
                    type: string
                  label:
                    type: string
                example:
                  error:
                    message: "Unauthorised request: Firebase ID token has invalid signature. See https://firebase.google.com/docs/auth/admin/verify-id-tokens for details on how to retrieve an ID token."
                  message: "Unauthorised request: Firebase ID token has invalid signature. See https://firebase.google.com/docs/auth/admin/verify-id-tokens for details on how to retrieve an ID token."
                  label: "Firebase Auth Request"
  /refresh_token:
    post:
      summary: 'Refresh token (role: no authentication)'
      tags:
      - 'Auth'
      security: []
      description: |
        Refresh a JWT token thanks to a refresh token.
        The refresh token should be included in the body.
      parameters:
      - $ref: '#/components/parameters/TestModeHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
              example:
                refresh_token: "AMf-vBzLROHH1di2PqYJxdnNnnz_yojuxy4BZxjkZ-IypO7x_wTCjW4PbH90KFk-5aJuRraN91sO3TSuJjZjRtY4J1HKclyNuv1NrahDIoMDw1ip1yFDmwi5QY0Omg4YZGk_vl6HB6SngA6I--XE0SA8Lh8jixWwtmkBc7Xj9V1uUE-q_nF1-I6G5G_U3Lhc7pSkaVwOCdbotJCbR9NhdH0D78wqmtBq1shVT0xqa6k5C46fivsLxmo"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  idToken:
                    type: string
                  refreshToken:
                    type: string
                  uid:
                    type: string
                  expiresIn:
                    type: string
                example:
                  success: true
                  idToken: "eyJhbGciOiJSUzI1NiIsImtpZCI6IjE2YjY0YzQwLTIxYjItNGM5Ny05ZDYyLTQ3N2Q4Mjk0YjA0YSIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJodHRwczovL2FydHlzY3VhZC5jb20iLCJzdWIiOiI2N2QyYmNlZjg1MzhjZDk0Y2ZlZjczZGEiLCJpc3MiOiJmaXJlYmFzZSIsImV4cCI6MTY4NjU1MzA5OSwiaWF0IjoxNjg2NTQ5NDk5fQ.8b7a"
                  refreshToken: "AMf-vBz..."
                  uid: "67d2bc99f0a0730d916a3fca"
                  expiresIn: "3600"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                example:
                  success: false
                  message: "INVALID_REFRESH_TOKEN"

  /users:
    get:
      summary: 'List all users (role: admin)'
      tags:
      - 'Users'
      description: |
        List all users in the system. 
        This endpoint is used to retrieve user information.
      parameters:
      - $ref: '#/components/parameters/TestModeHeader'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    post:
      summary: 'Create a new user (role: admin)'
      tags:
      - 'Users'
      description: |
        Create a new user in the system (database and firebase). 
        This endpoint is used to register new users.
      parameters:
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secAdmin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, name, role]
              properties:
                email:
                  type: string
                name:
                  type: string
                role:
                  type: string
                  enum: ["admin", "partner", "company", "user"]
                password:
                  type: string
                  format: password
                partner_id:
                  type: string
              example:
                email: testartysquad+backoffice@gmail.com
                password: ""
                name: Arty Squad
                role: admin
                partner_id: ""
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /users/{firebase_uid}:
    get:
      summary: 'View user details by Firebase UID (role: admin || any)'
      tags:
      - 'Users'
      description: |
        View user details by Firebase UID. 
        This endpoint is used to retrieve user information.
      parameters:
      - $ref: '#/components/parameters/FirebaseUIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secAdmin
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

    put:
      summary: 'Update user informations (role: admin)'
      tags:
      - 'Users'
      description: |
        Update user information in the system (database and firebase). 
        This endpoint is used to update user details.
      parameters:
      - $ref: '#/components/parameters/FirebaseUIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secAdmin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                role:
                  type: string
                partner_id:
                  type: string
                password:
                  type: string
                  format: password
              example:
                email: testartysquad+backoffice@gmail.com
                name: Arty Squad
                role: admin
                partner_id: ""
                password: passwordAB123@
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
    delete:
      summary: 'Delete user (role: admin)'
      tags:
      - 'Users'
      parameters:
      - $ref: '#/components/parameters/FirebaseUIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secAdmin
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /partners:
    get:
      summary: 'List all partners (role: admin)'
      tags:
      - 'Partners'
      parameters:
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secAdmin
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Partner'
  /partners/{id}:
    get:
      summary: 'View partner profile (role: partner)'
      tags:
      - 'Partners'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: &secPartner
      - BearerAuthPartner: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
    put:
      summary: 'Update partner profile (role: partner)'
      tags:
      - 'Partners'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                city:
                  type: string
                slug:
                  type: string
                bio:
                  type: string
                address:
                  type: string
                website:
                  type: string
                siret:
                  type: string
                naf:
                  type: string
                vat:
                  type: number
                  enum: [0, 2.1, 5.5, 10, 20]
      responses:
        '200':
          description: Success
  /activities:
    get:
      summary: 'List activities (role: admin || partner)'
      tags:
      - 'Activities'
      parameters:
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
  /activities/{id}:
    get:
      summary: 'View activity details (role: admin || partner)'
      tags:
      - 'Activities'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
  /activities/{id}/calendar/add:
    put:
      summary: 'Add session(s) to activity calendar (role: admin || partner)'
      tags:
      - 'Activities'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [date, start]
              properties:
                date:
                  type: string
                start:
                  type: string
                recurring:
                  type: boolean
                recurring_period:
                  type: string
                  enum: [week, month, day]
                recurring_quantity:
                  type: integer
                  minimum: 2
                  maximum: 15
              example:
                date: "2025-04-15"
                start: "15:00"
      responses:
        '200':
          description: Success
  /activities/{id}/calendar/edit:
    put:
      summary: 'Edit session(s) in activity calendar (role: admin || partner)'
      tags:
      - 'Activities'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [date, start]
              properties:
                session_id:
                  type: string
                current_date:
                  type: string
                  format: date
                date:
                  type: string
                  format: date
                start:
                  type: string
                  format: HH:MM
                new_activity_id:
                  type: string
              example:
                new_activity_id: 67c035c6f6793c078354c876s
                session_id: 67d2bfef8538cd94cfef73da
                current_date: "2025-04-15"
                date: "2025-04-16"
                start: "15:00"
      responses:
        '200':
          description: Success
  /activities/{id}/calendar/remove:
    put:
      summary: 'Remove session(s) from activity calendar (role: admin || partner)'
      tags:
      - 'Activities'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [date, session_id]
              properties:
                date:
                  type: string
                session_id:
                  type: string
              example:
                date: "2025-04-15"
                session_id: 67d2bfef8538cd94cfef73da
      responses:
        '200':
          description: Success
  /bookings:
    get:
      summary: 'List all bookings - filterable by time or status (role: admin || partner)'
      tags:
      - 'Bookings'
      parameters:
      - $ref: '#/components/parameters/TestModeHeader'
      - name: time
        in: query
        description: Filter bookings by time ("past" or "future")
        required: false
        schema:
          type: string
          enum: [past, future]
      - name: status
        in: query
        description: Filter bookings by status (e.g., to_validate, confirmed)
        required: false
        schema:
          type: string
          enum: [to_validate, confirmed, cancelled, to_reschedule]
      # requestBody:
      #   required: true
      #   content:
      #     application/json:
      #       schema:
      #         type: object
      #         properties:
      #           time:
      #             type: string
      #             enum: [past, future]
      #           status:
      #             type: string
      #             enum: [to_validate, confirmed, cancelled, to_reschedule]
      security: *secPartner
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
  /bookings/{id}:
    get:
      summary: 'View booking (role: admin || partner)'
      tags:
      - 'Bookings'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secAdmin
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
    put:
      summary: 'Update booking (role: admin)'
      tags:
      - 'Bookings'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secAdmin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                activity_id:
                  type: string
                activity_date:
                  type: string
                  format: date
                activity_start:
                  type: string
                  format: HH:MM
                  pattern: '^\d{2}:\d{2}$'
                price_per_person:
                  type: integer
                quantity:
                  type: integer
                customer_email:
                  type: string
                  format: email
                customer_name:
                  type: string
                customer_phone:
                  type: string
                customer_address:
                  type: string
                code_used:
                  type: string
                amount_discount:
                  type: string
                stripe_checkout_id:
                  type: string
                access_code:
                  type: string
                invoice_id:
                  type: string
                status:
                  type: string
                  enum: [to_validate, confirmed, cancelled, to_reschedule]
      responses:
        '200':
          description: Success
  /bookings/{id}/validate:
    put:
      summary: 'Validate booking (role: admin || partner)'
      tags:
      - 'Bookings'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      responses:
        '200':
          description: Success
  /bookings/{id}/cancel:
    put:
      summary: 'Cancel booking (role: admin || partner)'
      tags:
      - 'Bookings'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      responses:
        '200':
          description: Success
  /bookings/{id}/reschedule:
    put:
      summary: 'Reschedule booking (role: admin || partner)'
      tags:
      - 'Bookings'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                activity_id:
                  type: string
                current_session_id:
                  type: string
                current_date:
                  type: string
                  format: date
                new_sessions:
                  type: array
                  items:
                    properties:
                      session_id:
                        type: string
              example:
                activity_id: 67c035c6f6793c078354c876
                current_session_id: 67d2bfef8538cd94cfef73da
                current_date: "2025-04-15"
                new_sessions:
                  - session_id: 67d2bfef8538cd94cfef73da
                  - session_id: 67d2bfef8538cd94cfef73db
      responses:
        '200':
          description: Success
  /voucher_codes:
    get:
      summary: 'List all voucher codes (role: admin)'
      tags:
      - 'Voucher Codes'
      parameters:
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secAdmin
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VoucherCode'
  /voucher_codes/{id}:
    put:
      summary: 'Update a voucher code (role: admin)'
      tags:
      - 'Voucher Codes'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secAdmin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                first_name:
                  type: string
                last_name:
                  type: string
                expiration_date:
                  type: string
                  format: date-time
                code_status:
                  type: string
                  enum: [available, in_use, to_check, cancelled]
                code:
                  type: string
                company_order_id:
                  type: string
                company_id:
                  type: string
                balance:
                  type: number
                  minimum: 0
                checkout_session_id:
                  type: string
      responses:
        '200':
          description: Success
    delete:
      summary: 'Delete a voucher code (role: admin)'
      tags:
      - 'Voucher Codes'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secAdmin
      responses:
        '200':
          description: Success
  /partner_codes:
    get:
      summary: 'List partner codes (role: admin || partner)'
      tags:
      - 'Partner Codes'
      parameters:
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartnerCode'
    post:
      summary: 'Create new partner codes (role: admin || partner)'
      tags:
      - 'Partner Codes'
      parameters:
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  code:
                    type: string
                  activity_ids:
                    type: array
                    items:
                      type: string
                  expiration_date:
                    type: string
                    format: date-time
                  partner_id:
                    type: string
      responses:
        '200':
          description: Success
  /partner_codes/{id}:
    put:
      summary: 'Update a partner code (role: admin)'
      tags:
      - 'Partner Codes'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secAdmin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                activity_ids:
                  type: array
                  items:
                    type: string
                expiration_date:
                  type: string
                  format: date-time
                partner_id:
                  type: string
                status:
                  type: string
                  enum: [valid, used, cancelled, expired]
      responses:
        '200':
          description: Success
  /invoices:
    get:
      summary: 'List all invoices (role: admin || partner)'
      tags:
      - 'Invoices'
      parameters:
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'
  /invoices/{id}:
    get:
      summary: 'Get invoice details (role: admin || partner)'
      tags:
      - 'Invoices'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
  /invoice_recap:
    get:
      summary: 'List monthly invoice recaps (role: admin || partner)'
      tags:
      - 'Invoice Recaps'
      parameters:
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceRecap'
  /invoice_recap/{id}:
    get:
      summary: 'Get invoice recap (role: admin || partner)'
      tags:
      - 'Invoice Recaps'
      parameters:
      - $ref: '#/components/parameters/MongoIDQueryParam'
      - $ref: '#/components/parameters/TestModeHeader'
      security: *secPartner
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceRecap'
